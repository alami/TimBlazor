@page "/checkout"
@rendermode InteractiveServer
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="top-bar">
    <a class="logo" href="">
        <img src="img/logo.svg" />
    </a>

    <NavLink href="" class="nav-tab" Match="NavLinkMatch.All">
        <img src="img/pizza-slice.svg" />
        <div>Get Pizza</div>
    </NavLink>

    <NavLink href="myorders" class="nav-tab">
        <img src="img/bike.svg" />
        <div>My Orders</div>
    </NavLink>
</div>


<div class="main">
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            <OrderReview Order="Order" />
        </div>
        <div class="checkout-delivery-address">
            <h4>Deliver to...</h4>
            <AddressEditor Address="Order.DeliveryAddress" />
        </div>
    </div>

    <button class="checkout-button btn btn-warning" @onclick="PlaceOrder" disabled=@isSubmitting>
        Place order
    </button>
     
</div>

@code {
    Order Order => OrderState.Order;
    bool isSubmitting;

    async Task PlaceOrder()
    {
        isSubmitting = true;                //disable the Place order button,
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "mypost", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        //post JSON that will be added to pizza.db,
        OrderState.ResetOrder();            //clear the order,
        NavigationManager.NavigateTo($"myorders/{newOrderId}");  //and use NavigationManager to redirect customers to the home page.
    }
}